plugins {
	id 'java'
	id 'war'
	id 'org.springframework.boot' version '3.1.1'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.daanta'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '20'

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
	maven { url "https://plugins.gradle.org/m2/" }
	gradlePluginPortal()
}

dependencies {



	/**
	 * JAVA ESSENTIALS
	 */

	// JUnit for testing
	testImplementation platform('org.junit:junit-bom:latest.integration')
	testImplementation 'org.junit.jupiter:junit-jupiter'

	// 로깅 어노테이션을 쓰기 위한 롬복
	// LOMBOK은 사용 전제조건이 까다로우므로 사용 시 주의.
	// 1. 어떤 롬복을 어떤 타겟에 implement(release/dev 모두) 최신판의 버전 숫자를 필히 명기해줘야 한다.
	// 2. 반드시 Annotation Processor를 활성해줘야 한다.
	//  1) 밑에처럼 annotationProcessor 형식의 dependency도 추가로 선언해 줘야 함
	//     웬만하면 밑에 네개 다 넣어야 에러 안 남
	//  2) Settings > Build, Execution, Depolyment > Compiler > Annotation Processors
	//     > Enable annotation processing 에 체크해야 함
	// https://mvnrepository.com/artifact/org.projectlombok/lombok
	compileOnly "org.projectlombok:lombok:1.18.28"
	testCompileOnly "org.projectlombok:lombok:1.18.28"
	annotationProcessor "org.projectlombok:lombok:1.18.28"
	testAnnotationProcessor "org.projectlombok:lombok:1.18.28"

	// 로깅 라이브러리
	// api 'org.apache.utils.logging.log4j:log4j-core' <<< 안쓸려고..
	// 1. Bridge
	// https://mvnrepository.com/artifact/org.slf4j/jcl-over-slf4j
	implementation 'org.slf4j:jcl-over-slf4j:latest.integration'
	// 2. Slf4j API
	// https://mvnrepository.com/artifact/org.slf4j/slf4j-api
	implementation 'org.slf4j:slf4j-api:latest.integration'
	// 3. Binding
	// https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
	implementation 'ch.qos.logback:logback-classic:latest.integration'
	// 4. Slf4j's implemented object (=logback)
	// https://mvnrepository.com/artifact/ch.qos.logback/logback-core
	implementation 'ch.qos.logback:logback-core:latest.integration'

	// String 취급을 쉽게 해주는 Apache Commons Lang
	// https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
	implementation 'org.apache.commons:commons-lang3:latest.integration'

	// 파싱 등을 처리하기 위해 영입한 Apache Commons Text
	// https://mvnrepository.com/artifact/org.apache.commons/commons-text
	implementation 'org.apache.commons:commons-text:latest.integration'



	/**
	 * SPRING BOOT
	 */

	// Essential Spring Boot Implementations: Main
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.0'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	// Essential Spring Boot Implementations: Tesing
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'



	/**
	 * PLUGINS
	 */

	// XSS 공격을 방어하기 위한 LUXY XSS 서블릿
	// https://mvnrepository.com/artifact/com.navercorp.lucy/lucy-xss-servlet
	// https://mvnrepository.com/artifact/com.navercorp.lucy/lucy-xss-servlet
	implementation 'com.navercorp.lucy:lucy-xss-servlet:latest.integration'
	implementation 'com.navercorp.lucy:lucy-xss:latest.integration'



	/**
	 * DBMS
	 */

	// Essential implementation for manipulating DBMS
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	implementation 'org.postgresql:postgresql'



	/**
	 * Considering not using
 	 */

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
	compileOnly 'javax.servlet:javax.servlet-api:3.1.0'

}

tasks.named('test') {
	useJUnitPlatform()
}
